from transformers import AutoTokenizer, AutoModelForCausalLM
import torch, random, json
from datasets import load_dataset
from tqdm import tqdm

torch.set_default_device('cuda:1')

from transformers import AutoTokenizer, AutoModelForCausalLM
import torch, random, json
from datasets import load_dataset
from tqdm import tqdm

torch.set_default_device('cuda:1')

class PerplexityMeasurer:

    def __init__(self):
        device = 'cuda:1'
        model_name = 'meta-llama/Llama-2-7b-chat-hf'
        # model_name = "meta-llama/Meta-Llama-3.1-8B-Instruct"
        # model_name = "Qwen/Qwen2.5-7B-Instruct"
        # model_name = 'google/gemma-2-9b-it'
        self.causal_llm_tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.causal_llm_tokenizer.pad_token = self.causal_llm_tokenizer.eos_token
        # self.causal_llm = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype=torch.bfloat16, device_map=device)
        self.causal_llm = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype=torch.float16, device_map=device)

    def compute_perplexity_batch(self, texts):
        inputs = self.causal_llm_tokenizer(texts, padding=True, truncation=True, return_tensors="pt")
        input_ids = inputs['input_ids'].to(self.causal_llm.device)
        attention_mask = inputs['attention_mask'].to(self.causal_llm.device)

        labels = input_ids.clone()
        labels[labels == self.causal_llm_tokenizer.pad_token_id] = -100  # Ignore padding tokens

        lm_logits = self.causal_llm(input_ids=input_ids, attention_mask=attention_mask).logits

        shift_logits = lm_logits[..., :-1, :].contiguous()
        shift_labels = labels[..., 1:].contiguous()
        shift_masks = attention_mask[..., 1:].contiguous()

        loss_fct = torch.nn.CrossEntropyLoss(reduction='none', ignore_index=-100)
        loss = loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))

        loss = loss.view(shift_labels.shape[0], -1) * shift_masks
        loss = loss.sum(dim=-1) / shift_masks.sum(dim=-1)  # Normalize by the number of valid tokens

        return torch.exp(loss).tolist()  # Convert loss to perplexity

    def compute_perplexity(self, texts):
        chunk_size = 10
        perplexities = []
        for i in tqdm(range(0, len(texts), chunk_size)):
            perplexities.extend(self.compute_perplexity_batch(texts[i:i+chunk_size]))
        return perplexities


# doc_pp = [7.6593546867370605, 47.16160202026367, 62.32260513305664, 60.21858215332031, 68.27985382080078, 30.095138549804688, 70.25248718261719, 14.903837203979492, 17.415124893188477, 202.7380828857422, 13.560650825500488, 107.69644165039062, 20.7678279876709, 20.80392074584961, 12.226338386535645, 94.21549987792969, 42.720462799072266, 14.965447425842285, 35.58702850341797, 42.61640167236328, 20.20831298828125, 26.530399322509766, 73.0787582397461, 18.59316635131836, 33.7039680480957, 60.85466766357422, 14.801709175109863, 12.529216766357422, 57.56093215942383, 22.642786026000977, 42.11111068725586, 22.23638343811035, 59.79376220703125, 69.6649398803711, 66.36360931396484, 36.71685791015625, 45.746089935302734, 277.3146057128906, 144.33438110351562, 24.13033676147461, 8.583915710449219, 23.98421287536621, 20.5632381439209, 11.581811904907227, 72.19235229492188, 31.67672348022461, 177.54624938964844, 182.19692993164062, 25.242015838623047, 103.19840240478516, 112.05500793457031, 11.417030334472656, 51.627540588378906, 22.398212432861328, 31.32126808166504, 23.915565490722656, 14.045924186706543, 142.88531494140625, 515.2579345703125, 110.98880767822266, 32.35165786743164, 28.558155059814453, 96.59262084960938, 88.69866180419922, 77.0707778930664, 13.237846374511719, 8.809003829956055, 104.13504028320312, 58.344451904296875, 19.939985275268555, 10.63243293762207, 47.33942413330078, 43.61592483520508, 43.26621627807617, 29.166879653930664, 27.973106384277344, 111.63320922851562, 81.60922241210938, 64.93755340576172, 47.498966217041016, 55.12369155883789, 38.691349029541016, 42.59152603149414, 16.80258560180664, 21.6820068359375, 30.6272029876709, 25.97202491760254, 78.90602111816406, 11.595046043395996, 23.192590713500977, 21.691009521484375, 67.93728637695312, 64.03794860839844, 157.0919647216797, 25.452484130859375, 38.7655143737793, 126.57464599609375, 19.120290756225586, 14.321470260620117, 86.78726959228516, 20.383756637573242, 75.50232696533203, 6.848287582397461, 16.904111862182617, 27.09239387512207, 12.203058242797852, 41.7132682800293, 5.914608478546143, 52.124305725097656, 55.62989044189453, 20.346994400024414, 55.63498306274414, 11.101496696472168, 152.55255126953125, 55.26457595825195, 25.28342628479004, 21.792882919311523, 64.00421142578125, 38.470909118652344, 6.13158655166626, 42.77559280395508, 11.88922119140625, 78.52770233154297, 5.657063007354736, 440.8663635253906, 78.33883666992188, 18.41674041748047, 161.7470703125, 48.5427131652832, 66.77079772949219, 14.316858291625977, 9.3329439163208, 56.738502502441406, 14.028865814208984, 29.831830978393555, 80.95390319824219, 60.166603088378906, 10.936701774597168, 46.57617950439453, 76.31477355957031, 13.960443496704102, 24.34035301208496, 149.20120239257812, 52.83603286743164, 16.785791397094727, 35.15115737915039, 27.70073127746582, 8.814613342285156, 17.444110870361328, 96.57134246826172, 29.288904190063477, 54.715797424316406, 16.77048683166504, 19.122848510742188, 260.8214416503906, 18.770790100097656, 16.091712951660156, 30.780593872070312, 13.83858871459961, 8.698684692382812, 29.323123931884766, 67.47319793701172, 46.28538513183594, 23.220592498779297, 8.747322082519531, 89.83951568603516, 16.979225158691406, 67.68714141845703, 10.748934745788574, 82.56510162353516, 67.74991607666016, 42.010948181152344, 65.37687683105469, 58.4234619140625, 22.150184631347656, 44.72225570678711, 86.59233093261719, 21.570261001586914, 14.17175006866455, 19.235395431518555, 19.375492095947266, 28.709224700927734, 89.28680419921875, 46.30805587768555, 52.81072998046875, 22.718442916870117, 12.715266227722168, 130.31393432617188, 38.62230682373047, 62.84490203857422, 16.263456344604492, 33.15557098388672, 10.459386825561523, 13.4501371383667, 232.8230743408203, 20.604211807250977, 20.381750106811523, 88.51739501953125, 54.658870697021484, 35.33041000366211]
# adv_pp = [105.58007049560547, 28.378582000732422, 178.2875518798828, 112.64118957519531, 145.60159301757812, 217.94671630859375, 282.85211181640625, 307.96868896484375, 84.59154510498047, 618.3554077148438, 94.04911041259766, 181.3909149169922, 236.20278930664062, 48.30744552612305, 171.8773956298828, 116.98117065429688, 209.70738220214844, 97.15857696533203, 452.116455078125, 169.17718505859375, 140.74435424804688, 160.60089111328125, 238.6288299560547, 180.7007293701172, 146.6920623779297, 71.31281280517578, 151.48524475097656, 74.00149536132812, 34.0727653503418, 62.78481674194336, 76.01786804199219, 105.08914947509766, 69.63096618652344, 205.2438507080078, 336.9534912109375, 102.72811126708984, 111.38420867919922, 192.6806182861328, 34.09646224975586, 110.2978744506836, 65.48489379882812, 103.30574035644531, 95.07222747802734, 126.12723541259766, 99.28659057617188, 174.0609893798828, 115.63412475585938, 329.8446044921875, 135.96771240234375, 25.70600700378418, 77.31156921386719, 105.38667297363281, 115.87809753417969, 153.94476318359375, 55.355804443359375, 140.4955291748047, 444.7285461425781, 91.46190643310547, 150.4755401611328, 27.214885711669922, 63.108924865722656, 55.186710357666016, 193.43716430664062, 174.07725524902344, 36.40764617919922, 118.33409881591797, 275.85357666015625, 237.3590545654297, 185.9764862060547, 52.5628547668457, 105.91822814941406, 340.69427490234375, 161.93821716308594, 126.43602752685547, 444.0333251953125, 195.33432006835938, 169.30880737304688, 131.64474487304688, 216.98785400390625, 83.71812438964844, 111.772705078125, 238.9906005859375, 121.84109497070312, 251.45285034179688, 657.5730590820312, 90.73767852783203, 348.57244873046875, 169.6612548828125, 329.2970886230469, 103.84149932861328, 29.833772659301758, 442.27667236328125, 148.088623046875, 103.75463104248047, 259.76373291015625, 109.73152160644531, 346.43292236328125, 200.2253875732422, 241.35757446289062, 363.03814697265625, 186.9634552001953, 74.46760559082031, 68.90406036376953, 142.2007293701172, 134.92459106445312, 58.41719436645508, 122.15470123291016, 81.04896545410156, 114.1236801147461, 256.0703430175781, 193.40921020507812, 206.9261932373047, 156.47286987304688, 151.95542907714844, 348.3132629394531, 1007.7100830078125, 145.64303588867188, 128.9359588623047, 43.73210144042969, 72.40757751464844, 230.25636291503906, 45.56113815307617, 114.32292175292969, 116.80498504638672, 224.62171936035156, 60.02355194091797, 137.86590576171875, 176.2425537109375, 163.38320922851562, 386.3004455566406, 27.921127319335938, 393.0384826660156, 130.7324981689453, 332.8702087402344, 128.60678100585938, 129.2364044189453, 138.64871215820312, 165.06556701660156, 369.27618408203125, 275.2926025390625, 348.26824951171875, 275.5745849609375, 222.2680206298828, 122.1322250366211, 153.6953887939453, 179.12367248535156, 260.7170104980469, 130.68624877929688, 270.4429016113281, 91.31344604492188, 125.55939483642578, 218.24871826171875, 172.9495391845703, 226.84605407714844, 135.65835571289062, 99.54096221923828, 86.28196716308594, 155.2648162841797, 82.45698547363281, 97.08087158203125, 371.7423400878906, 272.0575866699219, 179.6830596923828, 95.01494598388672, 127.18740844726562, 189.3565673828125, 261.09808349609375, 96.94818878173828, 57.48245620727539, 194.91897583007812, 90.23226165771484, 975.2378540039062, 58.765220642089844, 259.69622802734375, 177.78558349609375, 82.73883056640625, 177.2484130859375, 249.9573516845703, 99.01558685302734, 606.01904296875, 137.12013244628906, 152.3974151611328, 145.8636474609375, 103.61664581298828, 274.24798583984375, 1605.727783203125, 489.1041564941406, 136.08914184570312, 118.45455932617188, 97.06452941894531, 211.5735626220703, 353.33392333984375, 73.35481262207031, 96.29948425292969, 64.10739135742188, 118.27914428710938, 37.970394134521484, 101.55487823486328, 88.64906311035156, 50.230316162109375]
# beast_pp = [52.85325241088867, 163.8389892578125, 55.680660247802734, 109.29011535644531, 45.4195671081543, 368.70733642578125, 96.32707977294922, 177.45755004882812, 58.30295944213867, 59.6030387878418, 120.79000854492188, 45.550819396972656, 55.80414962768555, 163.48382568359375, 132.4999542236328, 37.879356384277344, 199.25753784179688, 266.32281494140625, 431.0997619628906, 39.22197341918945, 68.12300109863281, 81.70236206054688, 110.8270263671875, 108.2930679321289, 79.83438873291016, 45.23103713989258, 80.17383575439453, 47.36528778076172, 62.4011116027832, 119.48333740234375, 227.4335174560547, 97.9178466796875, 40.60064697265625, 125.71168518066406, 102.392333984375, 60.39494705200195, 242.091796875, 126.9989242553711, 71.83042907714844, 33.400882720947266, 99.79922485351562, 120.43372344970703, 465.69854736328125, 274.9770812988281, 173.1356964111328, 33.35951614379883, 39.01944351196289, 74.46110534667969, 99.01776123046875, 28.72651481628418, 23.420991897583008, 544.3947143554688, 97.1551513671875, 143.72850036621094, 163.48147583007812, 218.88217163085938, 181.09027099609375, 369.0677490234375, 102.80729675292969, 24.817079544067383, 102.01697540283203, 29.75996971130371, 37.863739013671875, 79.63082885742188, 35.98971176147461, 199.59483337402344, 360.81048583984375, 52.63277816772461, 97.07192993164062, 261.0997009277344, 138.29855346679688, 102.45699310302734, 98.16619110107422, 83.22837829589844, 89.96774291992188, 13.132745742797852, 161.7923583984375, 226.89938354492188, 29.087371826171875, 22.134258270263672, 51.21717834472656, 91.17264556884766, 129.87176513671875, 47.21768569946289, 158.0437469482422, 95.95299530029297, 236.04042053222656, 315.9176940917969, 117.66822052001953, 137.18141174316406, 134.4671630859375, 80.8912353515625, 106.43605041503906, 88.64559936523438, 85.3101806640625, 56.38712692260742, 269.6807861328125, 20.591388702392578, 81.99687194824219, 84.56665802001953, 56.718379974365234, 105.24520874023438, 72.8309326171875, 130.16024780273438, 218.9363555908203, 107.03509521484375, 110.65457153320312, 143.7276611328125, 111.91542053222656, 295.63189697265625, 50.40424728393555, 117.34419250488281, 40.990577697753906, 116.61909484863281, 240.85182189941406, 155.23765563964844, 72.58352661132812, 106.08451080322266, 26.996776580810547, 286.80279541015625, 110.15270233154297, 244.5547637939453, 286.5676574707031, 355.1248474121094, 83.50923919677734, 30.71852684020996, 126.23698425292969, 68.9598388671875, 149.79429626464844, 246.63766479492188, 27.412677764892578, 182.09800720214844, 59.431026458740234, 274.20458984375, 86.56636047363281, 338.29534912109375, 143.55718994140625, 65.8271713256836, 130.22100830078125, 79.53728485107422, 25.26820182800293, 82.02948760986328, 51.839385986328125, 127.3974838256836, 58.70755386352539, 594.4730224609375, 134.61676025390625, 95.58943939208984, 140.6295166015625, 156.2948760986328, 102.6316146850586, 102.20886993408203, 201.54844665527344, 362.5628967285156, 97.21135711669922, 89.42212677001953, 60.38446807861328, 133.5872039794922, 113.7533187866211, 87.98414611816406, 223.50054931640625, 156.01565551757812, 747.4049682617188, 113.2045669555664, 85.88433837890625, 82.25027465820312, 83.38114929199219, 39.88784408569336, 124.207763671875, 455.6900329589844, 505.6939392089844, 42.28431701660156, 23.521865844726562, 195.26942443847656, 90.69174194335938, 28.03911018371582, 107.36751556396484, 124.33049011230469, 42.480953216552734, 81.69932556152344, 35.37400817871094, 151.2834930419922, 141.602783203125, 555.8754272460938, 58.23238754272461, 139.26910400390625, 85.48809051513672, 42.43606185913086, 82.38400268554688, 37.03376388549805, 308.25811767578125, 176.41961669921875, 184.0888214111328, 144.11404418945312, 234.96697998046875, 102.00948333740234, 44.636505126953125, 85.8012924194336, 194.30299377441406, 111.11663055419922]

def jailbreak_perplexity():
    docs = []
    measurer = PerplexityMeasurer()

    with open('/share/shmatikov/collin/adversarial_decoding/final_data/alpaca_doc_naturalness.json', 'r') as f:
        data = json.load(f)
        docs = [p[0] for p in data]
        doc_pp = measurer.compute_perplexity(docs)

    with open('/share/shmatikov/collin/adversarial_decoding/final_data/jailbreak_only/AdvDec_meta-llama_Meta-Llama-3.1-8B-Instruct_jailbreak_200_natural.json', 'r') as f:
        data = json.load(f)
        adv_docs = []
        for p in data:
            adv_docs.append(p['full_prompt'] + p['adv_suffix'])
        adv_pp = measurer.compute_perplexity(adv_docs)

    with open('/share/shmatikov/collin/adversarial_decoding/final_data/jailbreak_only/AdvDec_meta-llama_Meta-Llama-3.1-8B-Instruct_jailbreak_200_unnatural.json', 'r') as f:
        data = json.load(f)
        beast_docs = []
        for p in data:
            beast_docs.append(p['full_prompt'] + p['adv_suffix'])
        beast_pp = measurer.compute_perplexity(beast_docs)
    
    print('jailbreak_doc_pp = ', doc_pp)
    print('jailbreak_adv_pp = ', adv_pp)
    print('jailbreak_beast_pp = ', beast_pp)


def rag_perplexity():
    docs = []
    perplexities = []
    measurer = PerplexityMeasurer()
    with open('../final_data/rag_doc_naturalness.json', 'r') as f:
        data = json.load(f)
        docs = [p[0] for p in data]
        doc_pp = measurer.compute_perplexity(docs)

    with open('../final_data/rag/full_sent_contriever_llama_bias_asr_beam30_length30_topk_10.json', 'r') as f:
        data = json.load(f)
        adv_docs = []
        for p in data:
            for r in p['result']:
                adv_docs.append(p['control_text'] + r)
        adv_pp = measurer.compute_perplexity(adv_docs)

    with open('../final_data/rag/full_sent_contriever_llama_bias_asr_beam30_length30_topk_10_beast.json', 'r') as f:
        data = json.load(f)
        beast_docs = []
        for p in data:
            for r in p['result']:
                beast_docs.append(p['control_text'] + r)
        beast_pp = measurer.compute_perplexity(beast_docs)

    print('doc_pp = ', doc_pp)
    print('adv_pp = ', adv_pp)
    print('beast_pp = ', beast_pp)


def evasive():
    docs = []
    measurer = PerplexityMeasurer()

    with open('/share/shmatikov/collin/adversarial_decoding/final_data/alpaca_doc_naturalness.json', 'r') as f:
        data = json.load(f)
        docs = [p[0] for p in data]
        doc_pp = measurer.compute_perplexity(docs)

    with open('/share/shmatikov/collin/adversarial_decoding/final_data/jailbreak_guard/jailbreak_guard_natural_beam20_topk10_skip10_natural005_readable_prompt.json', 'r') as f:
        data = json.load(f)
        adv_docs = []
        for p in data:
            adv_docs.append(p['full_prompt'] + p['adv_suffix'])
        adv_pp = measurer.compute_perplexity(adv_docs)

    with open('/share/shmatikov/collin/adversarial_decoding/final_data/jailbreak_guard/jailbreak_guard_unnatural_beam30_topk10.json', 'r') as f:
        data = json.load(f)
        beast_docs = []
        for p in data:
            beast_docs.append(p['full_prompt'] + p['adv_suffix'])
        beast_pp = measurer.compute_perplexity(beast_docs)
    
    print('alpaca_pp = ', doc_pp)
    print('evasive_adv_pp = ', adv_pp)
    print('evasive_beast_pp = ', beast_pp)


# doc_pp = [24.136985778808594, 17.364986419677734, 7.891659259796143, 4.881304740905762, 11.473934173583984, 7.356191158294678, 69.57566833496094, 6.4083571434021, 6.865864276885986, 9.423876762390137, 9.206920623779297, 10.306228637695312, 12.700090408325195, 16.2713565826416, 13.357667922973633, 10.232282638549805, 13.64479923248291, 12.780900955200195, 9.940926551818848, 23.8759822845459, 6.178864002227783, 4.127526760101318, 24.571762084960938, 10.978489875793457, 10.914770126342773, 2.7893223762512207, 9.695651054382324, 34.000553131103516, 20.975643157958984, 7.572504997253418, 9.849634170532227, 8.287544250488281, 73.98466491699219, 25.778057098388672, 11.924592971801758, 9.446081161499023, 3.6404285430908203, 9.73911190032959, 17.514957427978516, 13.447019577026367, 10.511255264282227, 4.226175308227539, 12.610381126403809, 11.19922924041748, 26.129379272460938, 36.69037628173828, 12.560811042785645, 7.658413410186768, 11.328956604003906, 4.846091270446777, 17.487680435180664, 3.5401883125305176, 4.063169479370117, 5.539046287536621, 19.84725570678711, 5.173327445983887, 12.59072494506836, 9.466083526611328, 10.396238327026367, 10.378985404968262, 9.00318717956543, 5.755577087402344, 9.230878829956055, 14.724801063537598, 11.989481925964355, 7.781637668609619, 7.059539318084717, 23.2059383392334, 23.221839904785156, 9.476985931396484, 17.384294509887695, 7.819136619567871, 15.659307479858398, 19.953662872314453, 14.231481552124023, 14.6253662109375, 5.595881938934326, 12.006619453430176, 37.80355453491211, 13.019505500793457, 19.46320152282715, 7.769618034362793, 9.60513973236084, 21.7390079498291, 9.893372535705566, 29.523996353149414, 4.070606708526611, 5.622368335723877, 5.069320201873779, 8.41226577758789, 83.15269470214844, 15.615546226501465, 9.772506713867188, 24.797266006469727, 52.88466262817383, 7.758781433105469, 10.28217887878418, 13.70847225189209, 28.604745864868164, 9.449888229370117, 21.15532875061035, 12.33115291595459, 4.320058345794678, 18.95058822631836, 18.93501091003418, 10.963467597961426, 16.753934860229492, 1.9410325288772583, 23.166976928710938, 9.182644844055176, 12.56063461303711, 13.219038963317871, 16.514148712158203, 10.17179012298584, 17.609073638916016, 16.780113220214844, 12.487528800964355, 17.55674934387207, 17.949583053588867, 20.784893035888672, 6.095718860626221, 11.384561538696289, 12.991877555847168, 72.6902084350586, 13.229778289794922, 6.500255107879639, 20.674034118652344, 6.666614055633545, 18.873380661010742, 26.227537155151367, 12.104559898376465, 13.85202407836914, 13.448517799377441, 9.01650619506836, 29.568185806274414, 3.3005564212799072, 39.40924835205078, 5.420300483703613, 11.159799575805664, 12.01737117767334, 16.8536319732666, 20.428565979003906, 16.729740142822266, 16.28685760498047, 5.846706867218018, 9.011343955993652, 11.633774757385254, 6.392441749572754, 25.71543312072754, 14.121829986572266, 30.5295467376709, 7.231891632080078, 39.02348327636719, 34.630550384521484, 5.109670162200928, 16.060367584228516, 9.8118257522583, 7.511476516723633, 17.087121963500977, 19.96875762939453, 13.919105529785156, 5.93472146987915, 10.407599449157715, 23.35355567932129, 7.137781620025635, 61.9237060546875, 34.95158767700195, 14.470061302185059, 4.518569469451904, 6.396643161773682, 13.893393516540527, 22.457212448120117, 13.248679161071777, 34.942440032958984, 13.77427864074707, 17.71156883239746, 25.29431915283203, 5.423947334289551, 9.114710807800293, 10.22870922088623, 12.380983352661133, 12.510193824768066, 30.978979110717773, 13.81818675994873, 7.4713826179504395, 9.930976867675781, 4.961085319519043, 19.12731170654297, 7.449410438537598, 9.182876586914062, 16.652725219726562, 17.571699142456055, 12.486490249633789, 6.270963668823242, 8.53484058380127, 10.707441329956055, 7.420726776123047, 6.017361164093018, 11.332138061523438, 9.926070213317871]
# adv_pp = [54.75935745239258, 54.75935745239258, 26.25807762145996, 25.959545135498047, 21.711902618408203, 21.05999755859375, 29.07680320739746, 29.07680320739746, 20.88619613647461, 1475.302001953125, 34.136287689208984, 27.02715492248535, 20.728042602539062, 25.58213996887207, 45.867027282714844, 19.274145126342773, 23.03756332397461, 16.15843391418457, 25.514827728271484, 24.592334747314453, 18.297313690185547, 134.24856567382812, 119.853271484375, 106.94801330566406, 23.134567260742188, 12.700470924377441, 18.65779685974121, 49.239097595214844, 56.39952087402344, 23.43011474609375]
# beast_pp = [40.11981201171875, 59.24163055419922, 69.3581771850586, 14.580887794494629, 21.790788650512695, 22.162456512451172, 61.233219146728516, 67.4000473022461, 51.31886291503906, 44.04124069213867, 27.52139663696289, 63.59373092651367, 26.275148391723633, 21.920074462890625, 30.130640029907227, 18.18268585205078, 11.9063720703125, 16.356897354125977, 27.36911964416504, 26.868038177490234, 43.78125762939453, 131.86488342285156, 167.72654724121094, 141.5095672607422, 30.957033157348633, 41.99387741088867, 29.157228469848633, 25.818584442138672, 26.357769012451172, 29.219749450683594]

if __name__ == '__main__':
    # jailbreak_perplexity()
    rag_perplexity()
    # evasive()

